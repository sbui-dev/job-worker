// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: jobworker.proto

package jobworker_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	JobStop(ctx context.Context, in *WorkerStopRequest, opts ...grpc.CallOption) (*WorkerStopResponse, error)
	JobStart(ctx context.Context, in *WorkerStartRequest, opts ...grpc.CallOption) (Worker_JobStartClient, error)
	JobQuery(ctx context.Context, in *WorkerQueryRequest, opts ...grpc.CallOption) (*WorkerQueryResponse, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) JobStop(ctx context.Context, in *WorkerStopRequest, opts ...grpc.CallOption) (*WorkerStopResponse, error) {
	out := new(WorkerStopResponse)
	err := c.cc.Invoke(ctx, "/main.Worker/JobStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JobStart(ctx context.Context, in *WorkerStartRequest, opts ...grpc.CallOption) (Worker_JobStartClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/main.Worker/JobStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerJobStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_JobStartClient interface {
	Recv() (*WorkerStartResponse, error)
	grpc.ClientStream
}

type workerJobStartClient struct {
	grpc.ClientStream
}

func (x *workerJobStartClient) Recv() (*WorkerStartResponse, error) {
	m := new(WorkerStartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) JobQuery(ctx context.Context, in *WorkerQueryRequest, opts ...grpc.CallOption) (*WorkerQueryResponse, error) {
	out := new(WorkerQueryResponse)
	err := c.cc.Invoke(ctx, "/main.Worker/JobQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	JobStop(context.Context, *WorkerStopRequest) (*WorkerStopResponse, error)
	JobStart(*WorkerStartRequest, Worker_JobStartServer) error
	JobQuery(context.Context, *WorkerQueryRequest) (*WorkerQueryResponse, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) JobStop(context.Context, *WorkerStopRequest) (*WorkerStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStop not implemented")
}
func (UnimplementedWorkerServer) JobStart(*WorkerStartRequest, Worker_JobStartServer) error {
	return status.Errorf(codes.Unimplemented, "method JobStart not implemented")
}
func (UnimplementedWorkerServer) JobQuery(context.Context, *WorkerQueryRequest) (*WorkerQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobQuery not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_JobStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JobStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Worker/JobStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JobStop(ctx, req.(*WorkerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JobStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerStartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).JobStart(m, &workerJobStartServer{stream})
}

type Worker_JobStartServer interface {
	Send(*WorkerStartResponse) error
	grpc.ServerStream
}

type workerJobStartServer struct {
	grpc.ServerStream
}

func (x *workerJobStartServer) Send(m *WorkerStartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_JobQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JobQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Worker/JobQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JobQuery(ctx, req.(*WorkerQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobStop",
			Handler:    _Worker_JobStop_Handler,
		},
		{
			MethodName: "JobQuery",
			Handler:    _Worker_JobQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobStart",
			Handler:       _Worker_JobStart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobworker.proto",
}
